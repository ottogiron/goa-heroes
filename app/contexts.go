// Code generated by goagen v1.2.0, DO NOT EDIT.
//
// API "comics": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/ottogiron/goa-heroes/design
// --out=$(GOPATH)/src/github.com/ottogiron/goa-heroes
// --version=v1.2.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// CreateHeroContext provides the hero create action context.
type CreateHeroContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateHeroPayload
}

// NewCreateHeroContext parses the incoming request URL and body, performs validations and creates the
// context used by the hero controller create action.
func NewCreateHeroContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateHeroContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateHeroContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createHeroPayload is the hero create action payload.
type createHeroPayload struct {
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createHeroPayload) Validate() (err error) {
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	return
}

// Publicize creates CreateHeroPayload from createHeroPayload
func (payload *createHeroPayload) Publicize() *CreateHeroPayload {
	var pub CreateHeroPayload
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	return &pub
}

// CreateHeroPayload is the hero create action payload.
type CreateHeroPayload struct {
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateHeroPayload) Validate() (err error) {
	if payload.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateHeroContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateHeroContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// ListHeroContext provides the hero list action context.
type ListHeroContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListHeroContext parses the incoming request URL and body, performs validations and creates the
// context used by the hero controller list action.
func NewListHeroContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListHeroContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListHeroContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListHeroContext) OK(r GoaExampleHeroeCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.example.heroe+json; type=collection")
	if r == nil {
		r = GoaExampleHeroeCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ShowHeroContext provides the hero show action context.
type ShowHeroContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	HeroID int
}

// NewShowHeroContext parses the incoming request URL and body, performs validations and creates the
// context used by the hero controller show action.
func NewShowHeroContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowHeroContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowHeroContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramHeroID := req.Params["heroID"]
	if len(paramHeroID) > 0 {
		rawHeroID := paramHeroID[0]
		if heroID, err2 := strconv.Atoi(rawHeroID); err2 == nil {
			rctx.HeroID = heroID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("heroID", rawHeroID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowHeroContext) OK(r *GoaExampleHeroe) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.example.heroe+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowHeroContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
