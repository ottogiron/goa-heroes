// Code generated by goagen v1.2.0, DO NOT EDIT.
//
// API "comics": hero Resource Client
//
// Command:
// $ goagen
// --design=github.com/ottogiron/goa-heroes/design
// --out=$(GOPATH)/src/github.com/ottogiron/goa-heroes
// --version=v1.2.0

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// CreateHeroPayload is the hero create action payload.
type CreateHeroPayload struct {
	Name string `form:"name" json:"name" xml:"name"`
}

// CreateHeroPath computes a request path to the create action of hero.
func CreateHeroPath() string {

	return fmt.Sprintf("/heroes")
}

// Create new hero
func (c *Client) CreateHero(ctx context.Context, path string, payload *CreateHeroPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateHeroRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateHeroRequest create the request corresponding to the create action endpoint of the hero resource.
func (c *Client) NewCreateHeroRequest(ctx context.Context, path string, payload *CreateHeroPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// ListHeroPath computes a request path to the list action of hero.
func ListHeroPath() string {

	return fmt.Sprintf("/heroes")
}

// Retrieve all heroes
func (c *Client) ListHero(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListHeroRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListHeroRequest create the request corresponding to the list action endpoint of the hero resource.
func (c *Client) NewListHeroRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowHeroPath computes a request path to the show action of hero.
func ShowHeroPath(heroID int) string {
	param0 := strconv.Itoa(heroID)

	return fmt.Sprintf("/heroes/%s", param0)
}

// Get hero by id
func (c *Client) ShowHero(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowHeroRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowHeroRequest create the request corresponding to the show action endpoint of the hero resource.
func (c *Client) NewShowHeroRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
