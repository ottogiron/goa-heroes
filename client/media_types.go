// Code generated by goagen v1.2.0, DO NOT EDIT.
//
// API "comics": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/ottogiron/goa-heroes/design
// --out=$(GOPATH)/src/github.com/ottogiron/goa-heroes
// --version=v1.2.0

package client

import (
	"github.com/goadesign/goa"
	"net/http"
)

// DecodeErrorResponse decodes the ErrorResponse instance encoded in resp body.
func (c *Client) DecodeErrorResponse(resp *http.Response) (*goa.ErrorResponse, error) {
	var decoded goa.ErrorResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// A comic hero (default view)
//
// Identifier: application/vnd.hero+json; view=default
type Hero struct {
	// Unique heroe ID
	ID int `form:"id" json:"id" xml:"id"`
	// Name of hero
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate validates the Hero media type instance.
func (mt *Hero) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	return
}

// DecodeHero decodes the Hero instance encoded in resp body.
func (c *Client) DecodeHero(resp *http.Response) (*Hero, error) {
	var decoded Hero
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// HeroCollection is the media type for an array of Hero (default view)
//
// Identifier: application/vnd.hero+json; type=collection; view=default
type HeroCollection []*Hero

// Validate validates the HeroCollection media type instance.
func (mt HeroCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeHeroCollection decodes the HeroCollection instance encoded in resp body.
func (c *Client) DecodeHeroCollection(resp *http.Response) (HeroCollection, error) {
	var decoded HeroCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}
